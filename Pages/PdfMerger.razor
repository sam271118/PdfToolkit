@page "/pdfmerger"
@using static Components.ThemeChanger
@using static Components.Merger.PdfMerger
@using static Components.Merger.PdfMergerCore
@inject IJSRuntime JSRuntime


<!-- Wrapper -->
<div id="wrapper">

    <!-- Header -->
    <header id="header">

        <h1>PDF Merger</h1>

        @if (! string.IsNullOrEmpty(ThemeIcon))
        {
            <a id="themeSwitch" @onclick="ToggleFullTheme" class="@ThemeIcon" style="margin-top: 1.3em;" title="Change Theme"></a>
        }

    </header>


    <!-- Main -->
    <div style="text-align: center;">

        <section id="intro" class="@SpecialSectionTheme">

            @if (! @IsSubmitComplete)
            {
                <div>

                     <h2>T·∫£i l√™n c√°c t·ªáp PDF c·ªßa b·∫°n.</h2>
                     <h4>Gi·ªõi h·∫°n - 20 t·ªáp/20MB m·ªói t·ªáp</h4>

                    <br>

                    <p class="dropzone">
                        <InputFile OnChange="OnInputFileChange" multiple accept="application/pdf" title=""></InputFile>
                        K√©o v√† th·∫£ t·ªáp ho·∫∑c nh·∫•p ƒë·ªÉ t·∫£i l√™n.
                    </p>

                    <p>
                        <h2>@UploadMessage</h2>
                    </p>

                    @if (TotalFiles > MaxFilesAllowed || TotalSize > MaxSizeAllowed || FileType != FileTypeAllowed)
                    {
                        <p>
                            <h2>@UploadErrorMessage</h2>
                            <h1>üò¢</h1>
                        </p>
                    }

                    @if (uploadedFiles.Count > 0 && IsUploadComplete)
                    {
                        <div>

                            @foreach (IBrowserFile file in uploadedFiles)
                            {
                                <p style="margin: 0.5em;">

                                    @file.Name
                                    <a class="icon solid fas fa-times-circle" title="X√≥a File" @onclick="@(e => RemoveFile(file))" style="padding-left: 1em;"></a>

                                    @if (uploadedFiles.IndexOf(file) > 0)
                                    {
                                        <a class="icon solid fas fa-arrow-circle-up" title="Di Chuy·ªÉn File L√™n Tr√™n" @onclick="@(e => MoveFileUp(file))" style="padding-left: 1em;"></a>
                                    }

                                    @if (uploadedFiles.IndexOf(file) < (uploadedFiles.Count - 1))
                                    {
                                        <a class="icon solid fas fa-arrow-circle-down" title="Di Chuy·ªÉn File Xu·ªëng D∆∞·ªõi" @onclick="@(e => MoveFileDown(file))" style="padding-left: 1em;"></a>
                                    }
                                    
                                </p>
                            }

                        </div>
                    }

                    @if (@IsUploadComplete)
                    {
                        <p style="padding-top: 0.75em;">
                            <h2>@SubmitMessage</h2>
                        </p>

                        <p>
                            <button class="button primary large icon solid fas fa-check-circle" @onclick="Submit">Th·ª±c Hi·ªán</button>
                        </p>
                    }

                </div>
            }

            @if (@IsMergeComplete)
            {
                <div>

                    <h2>H·ª£p nh·∫•t th√†nh c√¥ng t·ªáp PDF @TotalFiles.  ‚úÖ</h2>
                    <h1>üéâ üéä</h1>
                    
                    <br>

                    <p>
                        <button class="button primary large icon solid fas fa-file-download" @onclick="DownloadFile">T·∫£i Xu·ªëng</button>
                    </p>

                    <p>
                        <a style="cursor: pointer;" class="icon solid fas fa-redo alt" title="L√†m L·∫°i" @onclick="Refresh"></a>
                    </p>

                    <p>
                        <h2>@DownloadMessage</h2>
                    </p>

                </div>
            }

        </section>

    </div>

@* 
    <!-- Footer -->
    <footer id="footer">
        <section style="text-align: center;">
            <img src="../images/square_crop_less.jpg" alt="" style="max-width: 93px; border-radius: 50%;" />
            <h3 style="font-weight: bold;">Subham Karmakar</h3>
            <p>Coding / Programming || Cloud || Software || Computers || Football</p>
            <a href="https://www.subhamk.com" class="button">About Me</a>
            <a href="https://blogs.subhamk.com" class="button">My Blogs</a>
            <a href="https://cheatsheets.subhamk.com" class="button">My CheatSheets</a>
        </section>
        <section>
            <h2 style="text-align: center;">Follow</h2>
            <ul class="icons" style="text-align: center;">
                <li><a href="https://www.twitter.com/SubhamK108" class="icon brands fab fa-twitter alt"></a></li>
                <!-- <li><a href="#" class="icon brands fa-facebook-f alt"></a></li> -->
                <!-- <li><a href="#" class="icon brands fa-instagram alt"></a></li> -->
                <!-- <li><a href="#" class="icon brands fa-linkedin-in alt"></a></li> -->
                <li><a href="https://www.github.com/SubhamK108" class="icon brands fab fa-github alt" title="GitHub"></a></li>
                <li><a href="https://www.hackerrank.com/SubhamK108" class="icon brands fab fa-hackerrank alt" title="HackerRank"></a></li>
                <li><a href="https://www.leetcode.com/SubhamK108" class="icon solid fas fa-code alt" title="LeetCode"></a></li>
            </ul>
        </section>
    </footer> *@


            <section style="text-align: center;">
            <a href="/" class="button">Quay L·∫°i Trang Ch·ªß</a>
        </section>


</div>



@code {
    private List<IBrowserFile> uploadedFiles = new List<IBrowserFile>();

    protected override async Task OnInitializedAsync()
    {
        if (IsFirstLoad)
        {
            IsFirstLoad = false;
            await GetThemeIcon();
        }
    }
    
    private async Task GetThemeIcon()
    {
        ThemeIcon = await JSRuntime.InvokeAsync<string>("getCurrentTheme");
    }

    private void ToggleFullTheme()
    {
        JSRuntime.InvokeVoidAsync("toggleBodyTheme", ThemeIcon);
        ToggleTheme();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        uploadedFiles.Clear();
        RefreshApp();

        UploadMessage = "T·∫£i l√™n c√°c t·ªáp c·ªßa b·∫°n ...  ‚è≥";
        TotalFiles = args.FileCount;

        if (TotalFiles > MaxFilesAllowed)
        {
            uploadedFiles.Clear();
            IsUploadComplete = false;
            UploadMessage = "T·∫£i l√™n th·∫•t b·∫°i!  ‚ùå";
            UploadErrorMessage = $"Cho ph√©p t·ªëi ƒëa {MaxFilesAllowed} t·ªáp!";
        }

        foreach (var pdfFile in args.GetMultipleFiles(MaxFilesAllowed))
        {
            TotalSize = pdfFile.Size;
            FileType = pdfFile.ContentType;

            if (TotalSize > MaxSizeAllowed)
            {
                uploadedFiles.Clear();
                IsUploadComplete = false;
                UploadMessage = "T·∫£i l√™n th·∫•t b·∫°i!  ‚ùå";
                UploadErrorMessage = "K√≠ch th∆∞·ªõc t·ªëi ƒëa 20MB cho m·ªói t·ªáp!";
                StateHasChanged();
            }

            if (FileType != FileTypeAllowed)
            {
                uploadedFiles.Clear();
                IsUploadComplete = false;
                UploadMessage = "T·∫£i l√™n th·∫•t b·∫°i!  ‚ùå";
                UploadErrorMessage = "B·∫°n ch·ªâ c√≥ th·ªÉ t·∫£i l√™n c√°c t·ªáp PDF!";
                StateHasChanged();
            }

            if (FileType == FileTypeAllowed)
            {
                byte[] buffer = new byte[pdfFile.Size];
                await pdfFile.OpenReadStream(MaxSizeAllowed).ReadAsync(buffer);
                Pdfs.Add(buffer);
                uploadedFiles.Add(pdfFile);
            }
        }

        if (string.IsNullOrEmpty(UploadErrorMessage))
        {
            if (TotalFiles == 1)
            {
                uploadedFiles.Clear();
                IsUploadComplete = false;
                UploadMessage = $"Ch·ªâ t·∫£i l√™n t·ªáp PDF c·ªßa {TotalFiles}, nh∆∞ v·∫≠y l√† ch∆∞a ƒë·ªß! B·∫°n ph·∫£i t·∫£i l√™n √≠t nh·∫•t 2 t·ªáp.  üòï";
            }
            else
            {
                IsUploadComplete = true;
                UploadMessage = $"ƒê√£ t·∫£i l√™n {TotalFiles} t·ªáp PDF.  ‚úÖ";
            }
        }
    }

    private async void Submit()
    {
        SubmitMessage = $"ƒêang h·ª£p nh·∫•t c√°c t·ªáp PDF c·ªßa {TotalFiles}, h√£y ki√™n nh·∫´n ...  ‚è≥";
        await Task.Delay(100);
        MergePdf();
        StateHasChanged();
    }

    private async Task SaveAs(string filename, string file)
    {
        await JSRuntime.InvokeVoidAsync("saveAsFile", filename, file);
    }

    private async void DownloadFile()
    {
        string filename = "Merged_PDF";
        DownloadMessage = "B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng ...  ‚è≥";
        await Task.Delay(100);
        await SaveAs(filename, FinalMergedPdfURL);
        DownloadMessage = "ƒê√£ b·∫Øt ƒë·∫ßu t·∫£i xu·ªëng  ‚úÖ";
        StateHasChanged();
    }

    private void RemoveFile(IBrowserFile file)
    {
        int index = uploadedFiles.IndexOf(file);
        uploadedFiles.RemoveAt(index);
        TotalFiles = uploadedFiles.Count;

        if (TotalFiles == 1)
        {
            uploadedFiles.Clear();
            UploadMessage = $"Kh√¥ng c√≤n ƒë·ªß t·ªáp PDF! C·∫ßn √≠t nh·∫•t 2 t·ªáp.  üòï";
            IsUploadComplete = false;
        }
        else
        {
            UploadMessage = $"{TotalFiles} t·ªáp PDF c√≤n l·∫°i.  ‚úÖ";
        }

        Pdfs.RemoveAt(index);
    }

    private void MoveFileUp(IBrowserFile file)
    {
        IBrowserFile movingFile = file;
        int index = uploadedFiles.IndexOf(file);
        uploadedFiles.RemoveAt(index);
        uploadedFiles.Insert(index - 1, movingFile);
        movingFile = null;

        byte[] movingBuffer = Pdfs[index];
        Pdfs.RemoveAt(index);
        Pdfs.Insert(index - 1, movingBuffer);
        movingBuffer = null;
    }

    private void MoveFileDown(IBrowserFile file)
    {
        IBrowserFile movingFile = file;
        int index = uploadedFiles.IndexOf(file);
        uploadedFiles.RemoveAt(index);
        uploadedFiles.Insert(index + 1, movingFile);
        movingFile = null;

        byte[] movingBuffer = Pdfs[index];
        Pdfs.RemoveAt(index);
        Pdfs.Insert(index + 1, movingBuffer);
        movingBuffer = null;
    }

    private void Refresh()
    {
        uploadedFiles.Clear();
        RefreshApp();
    }
}
